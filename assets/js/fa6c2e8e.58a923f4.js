"use strict";(self.webpackChunkpackages_docs=self.webpackChunkpackages_docs||[]).push([[460],{3905:function(e,t,n){n.d(t,{Zo:function(){return u},kt:function(){return d}});var a=n(7294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function l(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function o(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},i=Object.keys(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var s=a.createContext({}),p=function(e){var t=a.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):l(l({},t),e)),n},u=function(e){var t=p(e.components);return a.createElement(s.Provider,{value:t},e.children)},c={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},m=a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,i=e.originalType,s=e.parentName,u=o(e,["components","mdxType","originalType","parentName"]),m=p(n),d=r,v=m["".concat(s,".").concat(d)]||m[d]||c[d]||i;return n?a.createElement(v,l(l({ref:t},u),{},{components:n})):a.createElement(v,l({ref:t},u))}));function d(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var i=n.length,l=new Array(i);l[0]=m;var o={};for(var s in t)hasOwnProperty.call(t,s)&&(o[s]=t[s]);o.originalType=e,o.mdxType="string"==typeof e?e:r,l[1]=o;for(var p=2;p<i;p++)l[p]=n[p];return a.createElement.apply(null,l)}return a.createElement.apply(null,n)}m.displayName="MDXCreateElement"},3532:function(e,t,n){n.r(t),n.d(t,{frontMatter:function(){return o},contentTitle:function(){return s},metadata:function(){return p},toc:function(){return u},default:function(){return m}});var a=n(7462),r=n(3366),i=(n(7294),n(3905)),l=["components"],o={sidebar_position:4},s="Types",p={unversionedId:"types",id:"types",isDocsHomePage:!1,title:"Types",description:"This section covers the various value types that can be created from use and select.",source:"@site/docs/types.md",sourceDirName:".",slug:"/types",permalink:"/angular-composition-api/docs/types",editUrl:"https://github.com/mmuscat/angular-composition-api/tree/master/docs/types.md",tags:[],version:"current",sidebarPosition:4,frontMatter:{sidebar_position:4},sidebar:"tutorialSidebar",previous:{title:"Services",permalink:"/angular-composition-api/docs/services"},next:{title:"Providers",permalink:"/angular-composition-api/docs/providers"}},u=[{value:"Value",id:"value",children:[]},{value:"Deferred Value",id:"deferred-value",children:[]},{value:"Computed Value",id:"computed-value",children:[]},{value:"Accessor Value",id:"accessor-value",children:[]},{value:"Emitter",id:"emitter",children:[]}],c={toc:u};function m(e){var t=e.components,n=(0,r.Z)(e,l);return(0,i.kt)("wrapper",(0,a.Z)({},c,n,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("h1",{id:"types"},"Types"),(0,i.kt)("p",null,"This section covers the various value types that can be created from ",(0,i.kt)("inlineCode",{parentName:"p"},"use")," and ",(0,i.kt)("inlineCode",{parentName:"p"},"select"),"."),(0,i.kt)("h2",{id:"value"},"Value"),(0,i.kt)("p",null,"The ",(0,i.kt)("inlineCode",{parentName:"p"},"Value")," type is a reactive primitive that powers reactive APIs in this package."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-ts",metastring:'title="Example: Creating a value"',title:'"Example:',Creating:!0,a:!0,'value"':!0},'import { use } from "@mmuscat/angular-composition-api"\n\nconst value = use(0)\n')),(0,i.kt)("p",null,"It is similar to a\n",(0,i.kt)("inlineCode",{parentName:"p"},"BehaviorSubject")," in that it:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"Takes an initial value"),(0,i.kt)("li",{parentName:"ul"},"Emits the current value when it is subscribed to"),(0,i.kt)("li",{parentName:"ul"},"Can imperatively inspect the current value through its ",(0,i.kt)("inlineCode",{parentName:"li"},"value")," property accessor"),(0,i.kt)("li",{parentName:"ul"},"Can imperatively set a new value by calling ",(0,i.kt)("inlineCode",{parentName:"li"},"next"))),(0,i.kt)("p",null,"In addition to this, a ",(0,i.kt)("inlineCode",{parentName:"p"},"Value")," can:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"Access its value by invoking it with zero arguments"),(0,i.kt)("li",{parentName:"ul"},"Set its value by invoking it with one argument"),(0,i.kt)("li",{parentName:"ul"},"Be marked as a dependency by reactive observers (see ",(0,i.kt)("a",{parentName:"li",href:"/angular-composition-api/docs/subscriptions#reactive-observer"},"Subscriptions"),")"),(0,i.kt)("li",{parentName:"ul"},"Unwrapped by ",(0,i.kt)("inlineCode",{parentName:"li"},"ViewDef")," to a reactive value on the class instance (see ",(0,i.kt)("a",{parentName:"li",href:"/angular-composition-api/docs/views"},"Views"),")")),(0,i.kt)("p",null,"Where it differs:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"The ",(0,i.kt)("inlineCode",{parentName:"li"},"Value")," type does not implement error or complete observers"),(0,i.kt)("li",{parentName:"ul"},"The ",(0,i.kt)("inlineCode",{parentName:"li"},"Value")," type is an interop observable that inherits from ",(0,i.kt)("inlineCode",{parentName:"li"},"Function"))),(0,i.kt)("p",null,"Since ",(0,i.kt)("inlineCode",{parentName:"p"},"Value")," does not extend the ",(0,i.kt)("inlineCode",{parentName:"p"},"Observable")," prototype, ",(0,i.kt)("inlineCode",{parentName:"p"},"instanceof")," checks will fail. Should you require this, cast\n",(0,i.kt)("inlineCode",{parentName:"p"},"Value")," to an ",(0,i.kt)("inlineCode",{parentName:"p"},"Observable")," first using ",(0,i.kt)("inlineCode",{parentName:"p"},"pipe")," or ",(0,i.kt)("inlineCode",{parentName:"p"},"from"),"."),(0,i.kt)("h2",{id:"deferred-value"},"Deferred Value"),(0,i.kt)("p",null,"A deferred ",(0,i.kt)("inlineCode",{parentName:"p"},"Value")," has an initial state of ",(0,i.kt)("inlineCode",{parentName:"p"},"undefined"),", and does not start emitting values until its initial value has\nbeen set. Afterwards it behaves like a normal ",(0,i.kt)("inlineCode",{parentName:"p"},"Value"),". This behavior is similar to ",(0,i.kt)("inlineCode",{parentName:"p"},"ReplaySubject"),". Deferred values are\ncreated from ",(0,i.kt)("inlineCode",{parentName:"p"},"Observable")," objects."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-ts",metastring:'title="Example: Create a deferred value"',title:'"Example:',Create:!0,a:!0,deferred:!0,'value"':!0},'import { use } from "@mmuscat/angular-composition-api"\nimport { of } from "rxjs"\n\nconst deferredValue = use(of(10))\n')),(0,i.kt)("h2",{id:"computed-value"},"Computed Value"),(0,i.kt)("p",null,"A computed ",(0,i.kt)("inlineCode",{parentName:"p"},"Value")," is derived from other ",(0,i.kt)("inlineCode",{parentName:"p"},"Value")," objects using a reactive observer."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-ts",metastring:'title="Example: Create a computed value"',title:'"Example:',Create:!0,a:!0,computed:!0,'value"':!0},'import { select, use } from "@mmuscat/angular-composition-api"\n\nconst count = use(0)\nconst doubled = select(() => count() * 2)\n')),(0,i.kt)("h2",{id:"accessor-value"},"Accessor Value"),(0,i.kt)("p",null,"An ",(0,i.kt)("inlineCode",{parentName:"p"},"AccessorValue")," is a ",(0,i.kt)("inlineCode",{parentName:"p"},"Value")," with separate types for reading and writing values."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-ts",metastring:'title="Example: Creating an accessor value"',title:'"Example:',Creating:!0,an:!0,accessor:!0,'value"':!0},'import { select, use } from "@mmuscat/angular-composition-api"\n\nconst value = use(0)\nconst accessorValue = select({\n   next(nextValue: string) {\n      value.next(parseFloat(nextValue))\n   },\n   value,\n})\n')),(0,i.kt)("h2",{id:"emitter"},"Emitter"),(0,i.kt)("p",null,"An ",(0,i.kt)("inlineCode",{parentName:"p"},"Emitter")," is a functional wrapper around ",(0,i.kt)("inlineCode",{parentName:"p"},"EventEmitter"),". Unlike ",(0,i.kt)("inlineCode",{parentName:"p"},"Value")," it is not unwrapped by ",(0,i.kt)("inlineCode",{parentName:"p"},"ViewDef"),", does not\nhold state and cannot be marked as a dependency in reactive observers. It is ideal for ",(0,i.kt)("inlineCode",{parentName:"p"},"outputs")," and signals to trigger\nother state changes."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-ts",metastring:'title="Example: Create a void emitter"',title:'"Example:',Create:!0,a:!0,void:!0,'emitter"':!0},'import { use } from "@mmuscat/angular-composition-api"\n\nconst voidEmitter = use<void>(Function)\n\nvoidEmitter() // emit\n')),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-ts",metastring:'title="Example: Create emitter with single argument"',title:'"Example:',Create:!0,emitter:!0,with:!0,single:!0,'argument"':!0},'import { use } from "@mmuscat/angular-composition-api"\n\nconst basicEmitter = use<number>(Function)\n\nbasicEmitter(10) // emit\n')),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-ts",metastring:'title="Example: Create emitter with multiple arguments"',title:'"Example:',Create:!0,emitter:!0,with:!0,multiple:!0,'arguments"':!0},'import { use } from "@mmuscat/angular-composition-api"\n\nconst emitterWithParams = use((...args: number[]) =>\n   args.reduce((a, b) => a + b, 0),\n)\n\nemitterWithParams(1, 2, 3) // emit\n')))}m.isMDXComponent=!0}}]);