"use strict";(self.webpackChunkpackages_docs=self.webpackChunkpackages_docs||[]).push([[364],{3905:function(e,t,n){n.d(t,{Zo:function(){return u},kt:function(){return d}});var r=n(7294);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},o=Object.keys(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var l=r.createContext({}),c=function(e){var t=r.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},u=function(e){var t=c(e.components);return r.createElement(l.Provider,{value:t},e.children)},p={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},m=r.forwardRef((function(e,t){var n=e.components,a=e.mdxType,o=e.originalType,l=e.parentName,u=s(e,["components","mdxType","originalType","parentName"]),m=c(n),d=a,b=m["".concat(l,".").concat(d)]||m[d]||p[d]||o;return n?r.createElement(b,i(i({ref:t},u),{},{components:n})):r.createElement(b,i({ref:t},u))}));function d(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var o=n.length,i=new Array(o);i[0]=m;var s={};for(var l in t)hasOwnProperty.call(t,l)&&(s[l]=t[l]);s.originalType=e,s.mdxType="string"==typeof e?e:a,i[1]=s;for(var c=2;c<o;c++)i[c]=n[c];return r.createElement.apply(null,i)}return r.createElement.apply(null,n)}m.displayName="MDXCreateElement"},6395:function(e,t,n){n.r(t),n.d(t,{frontMatter:function(){return s},contentTitle:function(){return l},metadata:function(){return c},toc:function(){return u},default:function(){return m}});var r=n(7462),a=n(3366),o=(n(7294),n(3905)),i=["components"],s={sidebar_position:6},l="Utilities",c={unversionedId:"utils",id:"utils",isDocsHomePage:!1,title:"Utilities",description:"Get",source:"@site/docs/utils.md",sourceDirName:".",slug:"/utils",permalink:"/angular-composition-api/docs/utils",editUrl:"https://github.com/mmuscat/angular-composition-api/tree/master/docs/utils.md",tags:[],version:"current",sidebarPosition:6,frontMatter:{sidebar_position:6},sidebar:"tutorialSidebar",previous:{title:"Subscriptions",permalink:"/angular-composition-api/docs/subscriptions"},next:{title:"Error Handling",permalink:"/angular-composition-api/docs/errors"}},u=[{value:"Get",id:"get",children:[]},{value:"Access",id:"access",children:[]},{value:"Combine",id:"combine",children:[]},{value:"Pipe",id:"pipe",children:[]}],p={toc:u};function m(e){var t=e.components,n=(0,a.Z)(e,i);return(0,o.kt)("wrapper",(0,r.Z)({},p,n,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("h1",{id:"utilities"},"Utilities"),(0,o.kt)("h2",{id:"get"},"Get"),(0,o.kt)("p",null,"The ",(0,o.kt)("inlineCode",{parentName:"p"},"get")," utility retrieves the flattened state of a ",(0,o.kt)("inlineCode",{parentName:"p"},"Value")," or object containing ",(0,o.kt)("inlineCode",{parentName:"p"},"Value")," objects. When used inside a reactive\nobserver, this operation is reactive. ",(0,o.kt)("inlineCode",{parentName:"p"},"Value")," objects in arrays, maps or sets are not unwrapped."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-ts",metastring:'title="Example"',title:'"Example"'},'import { use, subscribe, get } from "@mmuscat/angular-composition-api"\n\nfunction setup() {\n   const count = use(0)\n   const disabled = use(false)\n\n   subscribe(() => {\n      const state = get({\n         count,\n         nested: {\n            disabled,\n         },\n      })\n\n      console.log(state.count) // 0\n      console.log(state.nested.disabled) // false\n   })\n}\n')),(0,o.kt)("h2",{id:"access"},"Access"),(0,o.kt)("p",null,"Performs the same operation as ",(0,o.kt)("inlineCode",{parentName:"p"},"get")," except it does not trigger reactive observers. ",(0,o.kt)("inlineCode",{parentName:"p"},"Value")," objects in arrays,\nmaps or sets are not unwrapped."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-ts",metastring:'title="Example"',title:'"Example"'},'import { use, subscribe, access } from "@mmuscat/angular-composition-api"\n\nfunction setup() {\n   const count = use(0)\n   const disabled = use(false)\n\n   subscribe(() => {\n      // not reactive!\n      const state = access({\n         count,\n         nested: {\n            disabled,\n         },\n      })\n\n      console.log(state.count) // 0\n      console.log(state.nested.disabled) // false\n   })\n}\n')),(0,o.kt)("h2",{id:"combine"},"Combine"),(0,o.kt)("p",null,"The ",(0,o.kt)("inlineCode",{parentName:"p"},"combine")," utility creates a new ",(0,o.kt)("inlineCode",{parentName:"p"},"Value")," from an object of ",(0,o.kt)("inlineCode",{parentName:"p"},"Value")," objects."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-ts",metastring:'title="Example"',title:'"Example"'},'import { use, combine, subscribe } from "@mmuscat/angular-composition-api"\n\nconst count = use(0)\nconst disabled = use(false)\nconst state = combine({\n   count,\n   nested: {\n      disabled\n   }\n})\n\nsubscribe(() => {\n   // called whenever `count` or `disabled` changes\n   const { count, nested: { disabled } } = state() \n})\n\nconsole.log(state.value) // { count: 0, nested: { disabled: false }}\n')),(0,o.kt)("p",null,"The combined ",(0,o.kt)("inlineCode",{parentName:"p"},"Value")," will react whenever one of its upstream values change."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-ts"},"count(10)\nconsole.log(state().count) // 10\n")),(0,o.kt)("p",null,"When updating a combined ",(0,o.kt)("inlineCode",{parentName:"p"},"Value"),", all upstream values are also updated. This operation accepts partial objects."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-ts"},"state({\n   count: 20,\n   nested: {\n      disabled: true\n   }\n})\n\nconsole.log(count()) // 20\nconsole.log(disabled()) // true\n")),(0,o.kt)("h2",{id:"pipe"},"Pipe"),(0,o.kt)("p",null,"The ",(0,o.kt)("inlineCode",{parentName:"p"},"pipe")," utility flattens a series of operations into a single ",(0,o.kt)("inlineCode",{parentName:"p"},"Value"),"."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-ts",metastring:'title="Example"',title:'"Example"'},'import { use, subscribe, pipe } from "@mmuscat/angular-composition-api"\nimport { HttpClient } from "@angular/common/http"\nimport { exhaustMap } from "rxjs/operators"\nimport { environment } from "./environment.ts"\n\nfunction setup() {\n   const http = inject(HttpClient)\n   const userId = use(EMPTY)\n   const todos = pipe(\n      userId,\n      exhaustMap(() => http.get(environment.url, { params: { userId } })),\n   )\n\n   subscribe(todos, (value) => {\n      console.log(value)\n   })\n\n   return {\n      userId,\n      todos,\n   }\n}\n')))}m.isMDXComponent=!0}}]);